import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InputFile
from dotenv import load_dotenv
from utils.speech_to_text import transcribe_audio
from utils.chatgpt_api import ask
from utils.text_to_speech import text_to_speech1
from utils.generation_image import generate_image
from utils.description_image import get_image_description
import os
import tempfile
import requests
from io import BytesIO

logging.basicConfig(level=logging.INFO)
load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()
router = Router()

user_preferences = {}
image_generation_mode = {}
photo_description_mode = {}

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
            [KeyboardButton(text="üì∑ –û–ø–∏—Å–∞—Ç—å —Ñ–æ—Ç–æ")]  
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéß –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º")],
            [KeyboardButton(text="üìÑ –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º")],
            [KeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –±–æ—Ç–∞")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_voice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê—Ö–º–µ–¥")],
            [KeyboardButton(text="–ö—Ö–∞–ª–∏–¥")],
            [KeyboardButton(text="–ê–º–∏—Ä–∞")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

async def download_image(url: str):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return BytesIO(response.content)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

@router.message(CommandStart())
async def start_command(message: Message):
    user_preferences[message.from_user.id] = {
        "output": "text",
        "voice": "Ahmad-PlayAI"
    }
    image_generation_mode[message.from_user.id] = False
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç:\n"
        "- –û—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—Å—Ç–æ–º/–≥–æ–ª–æ—Å–æ–º\n"
        "- –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def enable_image_generation(message: Message):
    image_generation_mode[message.from_user.id] = True
    await message.answer(
        "–†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_command(message: Message):
    if message.from_user.id not in user_preferences:
        await start_command(message)
        return 
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.message(F.text == "üì∑ –û–ø–∏—Å–∞—Ç—å —Ñ–æ—Ç–æ")
async def enable_photo_description(message: Message):
    photo_description_mode[message.from_user.id] = True
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –±–æ—Ç–∞")
async def voice_choice(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –±–æ—Ç–∞:",
        reply_markup=get_voice_keyboard()
    )

@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_command(message: Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–∞—è:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üéß –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º")
async def set_voice_response(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["output"] = "voice"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º.", reply_markup=get_main_keyboard())

@router.message(F.text == "üìÑ –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
async def set_text_response(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["output"] = "text"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_main_keyboard())

@router.message(F.text == "–ê—Ö–º–µ–¥")
async def set_ahmad_voice(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["voice"] = "Ahmad-PlayAI"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ê—Ö–º–µ–¥–∞.", reply_markup=get_main_keyboard())

@router.message(F.text == "–ö—Ö–∞–ª–∏–¥")
async def set_khalid_voice(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["voice"] = "Khalid-PlayAI"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ö—Ö–∞–ª–∏–¥–∞.", reply_markup=get_main_keyboard())

@router.message(F.text == "–ê–º–∏—Ä–∞")
async def set_amira_voice(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["voice"] = "Amira-PlayAI"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ê–º–∏—Ä—ã.", reply_markup=get_main_keyboard())

@router.message()
async def handle_messages(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_preferences:
        await start_command(message)
        return
    if photo_description_mode.get(user_id, False):
        photo_description_mode[user_id] = False
    
        try:
            file_id = message.photo[-1].file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            
            with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp_file:
                await bot.download_file(file_path, tmp_file.name)
                tmp_path = tmp_file.name
            
            description = get_image_description(tmp_path)
            
            await message.answer(
                f"üì∏ –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ:\n{description}",
                reply_markup=get_main_keyboard()
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            
        finally:
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.unlink(tmp_path)
    if image_generation_mode.get(user_id, False):
        image_generation_mode[message.from_user.id] = False
    
        processing_msg = await message.answer("üñåÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
        
        try:
            result = generate_image(message.text)
            
            if not result:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                return

            if result["type"] == "url":
                async with aiohttp.ClientSession() as session:
                    async with session.get(result["content"]) as response:
                        if response.status == 200:
                            img_data = await response.read()
                            
                            with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp_file:
                                tmp_file.write(img_data)
                                tmp_path = tmp_file.name
                            
                            await message.answer_photo(
                                FSInputFile(tmp_path),
                                caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
                                reply_markup=get_main_keyboard()
                            )
                            
                            os.unlink(tmp_path)
                        else:
                            raise ValueError(f"HTTP error {response.status}")

            elif result["type"] == "file":
                await message.answer_photo(
                    FSInputFile(result["content"]),
                    caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
                    reply_markup=get_main_keyboard()
                )
                
        except Exception as e:
            logging.error(f"Image processing error: {str(e)}", exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
        finally:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
            except:
                pass
        return
    
    if message.text in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚Ü©Ô∏è –ù–∞–∑–∞–¥", "üéß –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º", 
                       "üìÑ –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –±–æ—Ç–∞",
                       "–ê—Ö–º–µ–¥", "–ö—Ö–∞–ª–∏–¥", "–ê–º–∏—Ä–∞", "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]:
        return
    
    preferences = user_preferences[user_id]
    response_type = preferences.get("output", "text")
    voice_model = preferences.get("voice", "Ahmad-PlayAI")

    if message.voice:
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "message.wav")
        trans = transcribe_audio("message.wav")
        response_text = ask(trans)
    elif message.text:
        response_text = ask(message.text)
    else:
        return

    if response_type == "voice":
        audio_file = text_to_speech1(response_text, "response.ogg", voice_model)
        if audio_file:
            voice = FSInputFile(audio_file)
            await message.answer_voice(voice, reply_markup=get_main_keyboard())
            os.remove(audio_file)
        else:
            await message.answer(response_text, reply_markup=get_main_keyboard())
    else:
        await message.answer(response_text, reply_markup=get_main_keyboard())

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())