import asyncio
import logging
import aiohttp
import sqlite3
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from utils.speech_to_text import transcribe_audio
from utils.chatgpt_api import ask
from utils.text_to_speech import text_to_speech1
from utils.generation_image import generate_image
from utils.description_image import get_image_description
import os
import tempfile
import requests
from io import BytesIO
from datetime import datetime

logging.basicConfig(level=logging.INFO)
load_dotenv()


def init_db():
    conn = sqlite3.connect('feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS feedbacks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        model TEXT,
        rating INTEGER,
        comment TEXT,
        created_at TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS suggestions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        username TEXT,
        suggestion TEXT,
        created_at TEXT
    )
    ''')
    conn.commit()
    conn.close()


init_db()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()
router = Router()


class FeedbackStates(StatesGroup):
    choosing_model = State()
    rating = State()
    comment = State()


class SuggestionStates(StatesGroup):
    waiting_for_suggestion = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_preferences = {}
image_generation_mode = {}
photo_description_mode = {}
feedback_mode = {}
suggestion_mode = {}


def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üí¨ –ß–∞—Ç –±–æ—Ç —Å –ò–ò"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
            ],
            [KeyboardButton(text="üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
            [
                KeyboardButton(text="üì∑ –û–ø–∏—Å–∞—Ç—å —Ñ–æ—Ç–æ"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ")
            ],
            [
                KeyboardButton(text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"),
                KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ")
            ]
        ],
        resize_keyboard=True,
        persistent=True
    )


def get_chat_settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéß –û—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º (—á–∞—Ç)")],
            [KeyboardButton(text="üìÑ –û—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º (—á–∞—Ç)")],
            [KeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å (—á–∞—Ç)")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )


def get_photo_settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéß –û—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º (—Ñ–æ—Ç–æ)")],
            [KeyboardButton(text="üìÑ –û—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º (—Ñ–æ—Ç–æ)")],
            [KeyboardButton(text="üó£Ô∏è –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å (—Ñ–æ—Ç–æ)")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )


def get_chat_voice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê—Ö–º–µ–¥ (—á–∞—Ç)")],
            [KeyboardButton(text="–ö—Ö–∞–ª–∏–¥ (—á–∞—Ç)")],
            [KeyboardButton(text="–ê–º–∏—Ä–∞ (—á–∞—Ç)")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )


def get_photo_voice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê—Ö–º–µ–¥ (—Ñ–æ—Ç–æ)")],
            [KeyboardButton(text="–ö—Ö–∞–ª–∏–¥ (—Ñ–æ—Ç–æ)")],
            [KeyboardButton(text="–ê–º–∏—Ä–∞ (—Ñ–æ—Ç–æ)")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )


def get_models_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ChatGPT")],
            [KeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")],
            [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")],
            [KeyboardButton(text="–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )


def get_rating_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="1 ‚≠ê"),
                KeyboardButton(text="2 ‚≠ê‚≠ê")
            ],
            [
                KeyboardButton(text="3 ‚≠ê‚≠ê‚≠ê"),
                KeyboardButton(text="4 ‚≠ê‚≠ê‚≠ê‚≠ê")
            ],
            [
                KeyboardButton(text="5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")
            ],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )


async def save_feedback(user_id: int, username: str, model: str, rating: int, comment: str):
    conn = sqlite3.connect('feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO feedbacks (user_id, username, model, rating, comment, created_at)
    VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, model, rating, comment, datetime.now().isoformat()))
    conn.commit()
    conn.close()


async def save_suggestion(user_id: int, username: str, suggestion: str):
    conn = sqlite3.connect('feedback.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO suggestions (user_id, username, suggestion, created_at)
    VALUES (?, ?, ?, ?)
    ''', (user_id, username or f"user_{user_id}", suggestion, datetime.now().isoformat()))
    conn.commit()
    conn.close()


def init_user_preferences(user_id: int):
    if user_id not in user_preferences:
        user_preferences[user_id] = {
            "chat_output": "text",
            "chat_voice": "Ahmad-PlayAI",
            "photo_output": "text",
            "photo_voice": "Ahmad-PlayAI"
        }


@router.message(CommandStart())
async def start_command(message: Message):
    init_user_preferences(message.from_user.id)
    image_generation_mode[message.from_user.id] = False
    photo_description_mode[message.from_user.id] = False
    feedback_mode[message.from_user.id] = False
    suggestion_mode[message.from_user.id] = False
    await message.answer(
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ò–ò-–±–æ—Ç–∞! üåü\n\n"
        "–Ø —É–º–µ—é:\n"
        "üí¨ –û–±—â–∞—Ç—å—Å—è –∫–∞–∫ ChatGPT (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)\n"
        "üé® –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n"
        "üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:\n\n\n"
        "üí¨ –†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üé§ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç!",
        reply_markup=get_main_keyboard()
    )


@router.message(SuggestionStates.waiting_for_suggestion, F.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_suggestion(message: Message, state: FSMContext):
    await state.clear()
    suggestion_mode[message.from_user.id] = False
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )


@router.message(SuggestionStates.waiting_for_suggestion)
async def process_suggestion(message: Message, state: FSMContext):
    suggestion = message.text
    await save_suggestion(
        user_id=message.from_user.id,
        username=message.from_user.username,
        suggestion=suggestion
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()
    suggestion_mode[message.from_user.id] = False


@router.message(FeedbackStates.choosing_model, F.text.in_(["ChatGPT", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "–¢–µ–∫—Å—Ç –≤ —Ä–µ—á—å"]))
async def choose_model(message: Message, state: FSMContext):
    await state.update_data(model=message.text)
    await state.set_state(FeedbackStates.rating)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:",
        reply_markup=get_rating_keyboard()
    )


@router.message(FeedbackStates.rating, F.text.regexp(r'^\d ‚≠ê+$'))
async def set_rating(message: Message, state: FSMContext):
    rating = int(message.text.split()[0])
    await state.update_data(rating=rating)
    await state.set_state(FeedbackStates.comment)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )
    )


@router.message(FeedbackStates.comment)
async def set_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    model = data.get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    rating = data.get('rating', 0)
    comment = message.text if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

    await save_feedback(
        user_id=message.from_user.id,
        username=message.from_user.username or f"user_{message.from_user.id}",
        model=model,
        rating=rating,
        comment=comment
    )

    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ {model}!\n"
        f"–û—Ü–µ–Ω–∫–∞: {rating} –∑–≤–µ–∑–¥\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}",
        reply_markup=get_main_keyboard()
    )
    await state.clear()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞")
async def chat_settings_command(message: Message):
    init_user_preferences(message.from_user.id)
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç-–±–æ—Ç–∞:\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "üîâ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)\n"
        "üó£Ô∏è –ì–æ–ª–æ—Å –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_chat_settings_keyboard()
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ")
async def photo_settings_command(message: Message):
    init_user_preferences(message.from_user.id)
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ç–æ:\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
        "üîâ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å)\n"
        "üó£Ô∏è –ì–æ–ª–æ—Å –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_photo_settings_keyboard()
    )


@router.message(F.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_feedback(message: Message, state: FSMContext):
    await state.set_state(FeedbackStates.choosing_model)
    await message.answer(
        "üìù –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤:",
        reply_markup=get_models_keyboard()
    )


@router.message(F.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ")
async def start_suggestion(message: Message, state: FSMContext):
    await state.set_state(SuggestionStates.waiting_for_suggestion)
    await message.answer(
        "üí° –í–∞—à–∏ –∏–¥–µ–∏ –¥–µ–ª–∞—é—Ç –Ω–∞—Å –ª—É—á—à–µ!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞.\n"
        "–ú—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )


@router.message(F.text == "ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å (—á–∞—Ç)")
async def chat_voice_choice(message: Message):
    init_user_preferences(message.from_user.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞:",
        reply_markup=get_chat_voice_keyboard()
    )


@router.message(F.text == "üó£Ô∏è –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å (—Ñ–æ—Ç–æ)")
async def photo_voice_choice(message: Message):
    init_user_preferences(message.from_user.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ç–æ:",
        reply_markup=get_photo_voice_keyboard()
    )


@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_command(message: Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "üéß –û—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º (—á–∞—Ç)")
async def set_chat_voice_response(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["chat_output"] = "voice"
    await message.answer("–í —á–∞—Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º.", reply_markup=get_main_keyboard())


@router.message(F.text == "üìÑ –û—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º (—á–∞—Ç)")
async def set_chat_text_response(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["chat_output"] = "text"
    await message.answer("–í —á–∞—Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_main_keyboard())


@router.message(F.text == "–ê—Ö–º–µ–¥ (—á–∞—Ç)")
async def set_chat_ahmad_voice(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["chat_voice"] = "Ahmad-PlayAI"
    await message.answer("–í —á–∞—Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ê—Ö–º–µ–¥–∞.", reply_markup=get_main_keyboard())


@router.message(F.text == "–ö—Ö–∞–ª–∏–¥ (—á–∞—Ç)")
async def set_chat_khalid_voice(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["chat_voice"] = "Khalid-PlayAI"
    await message.answer("–í —á–∞—Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ö—Ö–∞–ª–∏–¥–∞.", reply_markup=get_main_keyboard())


@router.message(F.text == "–ê–º–∏—Ä–∞ (—á–∞—Ç)")
async def set_chat_amira_voice(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["chat_voice"] = "Amira-PlayAI"
    await message.answer("–í —á–∞—Ç–µ –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ê–º–∏—Ä—ã.", reply_markup=get_main_keyboard())


@router.message(F.text == "üéß –û—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º (—Ñ–æ—Ç–æ)")
async def set_photo_voice_response(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["photo_output"] = "voice"
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–º.", reply_markup=get_main_keyboard())


@router.message(F.text == "üìÑ –û—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º (—Ñ–æ—Ç–æ)")
async def set_photo_text_response(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["photo_output"] = "text"
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_main_keyboard())


@router.message(F.text == "–ê—Ö–º–µ–¥ (—Ñ–æ—Ç–æ)")
async def set_photo_ahmad_voice(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["photo_voice"] = "Ahmad-PlayAI"
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–º –ê—Ö–º–µ–¥–∞.", reply_markup=get_main_keyboard())


@router.message(F.text == "–ö—Ö–∞–ª–∏–¥ (—Ñ–æ—Ç–æ)")
async def set_photo_khalid_voice(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["photo_voice"] = "Khalid-PlayAI"
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–º –ö—Ö–∞–ª–∏–¥–∞.", reply_markup=get_main_keyboard())


@router.message(F.text == "–ê–º–∏—Ä–∞ (—Ñ–æ—Ç–æ)")
async def set_photo_amira_voice(message: Message):
    init_user_preferences(message.from_user.id)
    user_preferences[message.from_user.id]["photo_voice"] = "Amira-PlayAI"
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–º –ê–º–∏—Ä—ã.", reply_markup=get_main_keyboard())


async def handle_chat_mode(message: Message):
    user_id = message.from_user.id

    preferences = user_preferences.get(user_id, {
        "chat_output": "text",
        "chat_voice": "Ahmad-PlayAI"
    })

    if message.voice:
        try:
            processing_msg = await message.answer("üîä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

            file_id = message.voice.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path

            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
                await bot.download_file(file_path, tmp_file.name)
                tmp_path = tmp_file.name

            user_text = transcribe_audio(tmp_path)
            os.unlink(tmp_path)

            await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)

            if not user_text:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return

            await message.answer(f"üé§ –í—ã —Å–∫–∞–∑–∞–ª–∏:\n\n{user_text}")

        except Exception as e:
            logging.error(f"Voice processing error: {str(e)}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return

    elif message.text:
        user_text = message.text
    else:
        return

    try:
        thinking_msg = await message.answer("üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
        response_text = ask(user_text)
        await bot.delete_message(chat_id=message.chat.id, message_id=thinking_msg.message_id)

        if not response_text:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

    except Exception as e:
        logging.error(f"Chat error: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        return

    if preferences["chat_output"] == "voice":
        try:
            converting_msg = await message.answer("üîä –ü—Ä–µ–æ–±—Ä–∞–∑—É—é –æ—Ç–≤–µ—Ç –≤ –≥–æ–ª–æ—Å...")

            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp_file:
                audio_path = tmp_file.name

            success = text_to_speech1(
                response_text, audio_path, preferences["chat_voice"])

            if success:
                await message.answer_voice(
                    FSInputFile(audio_path),
                    caption="üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer(
                    f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{response_text}",
                    reply_markup=get_main_keyboard()
                )

            os.unlink(audio_path)
            await bot.delete_message(chat_id=message.chat.id, message_id=converting_msg.message_id)

        except Exception as e:
            logging.error(f"Voice generation error: {str(e)}")
            await message.answer(
                f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{response_text}",
                reply_markup=get_main_keyboard()
            )

    else:
        await message.answer(
            f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{response_text}",
            reply_markup=get_main_keyboard()
        )


@router.message()
async def handle_messages(message: Message):
    user_id = message.from_user.id

    if user_id not in user_preferences:
        await start_command(message)
        return

    def reset_all_modes():
        nonlocal user_id
        image_generation_mode[user_id] = False
        photo_description_mode[user_id] = False
        feedback_mode[user_id] = False
        suggestion_mode[user_id] = False

    if message.text == "üí¨ –ß–∞—Ç –±–æ—Ç —Å –ò–ò":
        reset_all_modes()
        await message.answer(
            "üí¨ –†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "üé§ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç!",
            reply_markup=get_main_keyboard()
        )
        return

    elif message.text == "üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        reset_all_modes()
        image_generation_mode[user_id] = True
        await message.answer(
            "üé® –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, "
            "–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "¬´–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ç—Ä–æ-—Ñ—É—Ç—É—Ä–∏–∑–º¬ª\n"
            "¬´–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç –∫–æ—Ç–∞ –≤ —à–ª—è–ø–µ¬ª\n\n"
            "–Ø —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!",
            reply_markup=get_main_keyboard()
        )
        return

    elif message.text == "üì∑ –û–ø–∏—Å–∞—Ç—å —Ñ–æ—Ç–æ":
        reset_all_modes()
        photo_description_mode[user_id] = True
        await message.answer(
            "üì∑ –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è:\n"
            "üîç –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à—É —á—Ç–æ –Ω–∞ –Ω–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ\n"
            "üé® –û–ø—Ä–µ–¥–µ–ª—é —Å—Ç–∏–ª—å –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é\n"
            "üí° –î–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=get_main_keyboard()
        )
        return

    elif message.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        reset_all_modes()
        await start_feedback(message, FSMContext)
        return

    elif message.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ":
        reset_all_modes()
        suggestion_mode[user_id] = True
        await start_suggestion(message, FSMContext)
        return

    if not any([
        image_generation_mode.get(user_id, False),
        photo_description_mode.get(user_id, False),
        feedback_mode.get(user_id, False),
        suggestion_mode.get(user_id, False)
    ]):
        await handle_chat_mode(message)
        return

    if suggestion_mode.get(user_id, False):
        suggestion = message.text
        await save_suggestion(
            user_id=user_id,
            username=message.from_user.username,
            suggestion=suggestion
        )
        await message.answer(
            "üíå –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
        return

    if photo_description_mode.get(user_id, False):
        try:
            if not message.photo:
                await message.answer(
                    "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è.",
                    reply_markup=get_main_keyboard()
                )
                return

            file_id = message.photo[-1].file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path

            with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp_file:
                await bot.download_file(file_path, tmp_file.name)
                tmp_path = tmp_file.name
            description = get_image_description(tmp_path)

            output_type = user_preferences[user_id].get("photo_output", "text")
            voice_model = user_preferences[user_id].get(
                "photo_voice", "Ahmad-PlayAI")

            if output_type == "voice":
                audio_file = text_to_speech1(
                    description, "photo_description.ogg", voice_model)
                if audio_file:
                    voice = FSInputFile(audio_file)
                    await message.answer_voice(
                        voice,
                        caption="üîç –í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ:",
                        reply_markup=get_main_keyboard()
                    )
                    os.remove(audio_file)
                else:
                    await message.answer(
                        f"üîç –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ:\n\n{description}",
                        reply_markup=get_main_keyboard()
                    )
            else:
                await message.answer(
                    f"üîç –û–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ:\n\n{description}",
                    reply_markup=get_main_keyboard()
                )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
            await message.answer(
                "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                reply_markup=get_main_keyboard()
            )

        finally:
            if 'tmp_path' in locals() and os.path.exists(tmp_path):
                os.unlink(tmp_path)
        return

    if image_generation_mode.get(user_id, False):
        processing_msg = await message.answer("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã")

        try:
            if message.voice:
                file_id = message.voice.file_id
                file = await bot.get_file(file_id)
                file_path = file.file_path
                await bot.download_file(file_path, "voice_prompt.wav")
                prompt = transcribe_audio("voice_prompt.wav")
                os.remove("voice_prompt.wav")
                await message.answer(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {prompt}")
            else:
                prompt = message.text

            result = generate_image(prompt)

            if not result:
                await message.answer(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                    reply_markup=get_main_keyboard()
                )
                return

            if result["type"] == "url":
                async with aiohttp.ClientSession() as session:
                    async with session.get(result["content"]) as response:
                        if response.status == 200:
                            img_data = await response.read()

                            with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp_file:
                                tmp_file.write(img_data)
                                tmp_path = tmp_file.name

                            await message.answer_photo(
                                FSInputFile(tmp_path),
                                caption="üñºÔ∏è –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
                                reply_markup=get_main_keyboard()
                            )
                            os.unlink(tmp_path)
                        else:
                            raise ValueError(f"HTTP error {response.status}")

            elif result["type"] == "file":
                await message.answer_photo(
                    FSInputFile(result["content"]),
                    caption="üñºÔ∏è –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!",
                    reply_markup=get_main_keyboard()
                )

        except Exception as e:
            logging.error(f"Image generation error: {str(e)}", exc_info=True)
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )

        finally:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
            except:
                pass
        return


dp.include_router(router)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
