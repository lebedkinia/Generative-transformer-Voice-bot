import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from utils.config import BOT_TOKEN
from utils.speech_to_text import transcribe_audio
from utils.chatgpt_api import ask
from utils.text_to_speech import text_to_speech1
import os

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

user_preferences = {}

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_settings_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéß –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º")],
            [KeyboardButton(text="üìÑ –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º")],
            [KeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –±–æ—Ç–∞")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

def get_voice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê—Ö–º–µ–¥")],
            [KeyboardButton(text="–ö—Ö–∞–ª–∏–¥")],
            [KeyboardButton(text="–ê–º–∏—Ä–∞")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        persistent=True
    )

@router.message(F.text == "ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –±–æ—Ç–∞")
async def voice_choice(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –±–æ—Ç–∞:",
        reply_markup=get_voice_keyboard()
    )

@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_command(message: Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–∞—è:",
        reply_markup=get_main_keyboard()
    )

@router.message(CommandStart())
async def start_command(message: Message):
    user_preferences[message.from_user.id] = {
        "output": "text", 
        "voice": "Ahmad-PlayAI"  
    }
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º.\n"
        "–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("settings"))
@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_command(message: Message):
    if message.from_user.id not in user_preferences:
        await start_command(message)
        return
    
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.message(F.text == "üìÑ –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
async def set_text_response(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["output"] = "text"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=get_main_keyboard())

@router.message(F.text == "üéß –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º")
async def set_voice_response(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["output"] = "voice"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º.", reply_markup=get_main_keyboard())

@router.message(F.text == "–ê—Ö–º–µ–¥")
async def set_ahmad_voice(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["voice"] = "Ahmad-PlayAI"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ê—Ö–º–µ–¥–∞.", reply_markup=get_main_keyboard())

@router.message(F.text == "–ö—Ö–∞–ª–∏–¥")
async def set_khalid_voice(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["voice"] = "Khalid-PlayAI"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ö—Ö–∞–ª–∏–¥–∞.", reply_markup=get_main_keyboard())

@router.message(F.text == "–ê–º–∏—Ä–∞")
async def set_amira_voice(message: Message):
    if message.from_user.id not in user_preferences:
        user_preferences[message.from_user.id] = {}
    
    user_preferences[message.from_user.id]["voice"] = "Amira-PlayAI"
    await message.answer("–ë—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –ê–º–∏—Ä—ã.", reply_markup=get_main_keyboard())

@router.message()
async def handle_messages(message: Message):
    user_id = message.from_user.id

    if user_id not in user_preferences:
        await start_command(message)
        return
    
    if message.text in ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚Ü©Ô∏è –ù–∞–∑–∞–¥", "üéß –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º", 
                       "üìÑ –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "ü§ñ –í—ã–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å –±–æ—Ç–∞",
                       "–ê—Ö–º–µ–¥", "–ö—Ö–∞–ª–∏–¥", "–ê–º–∏—Ä–∞"]:
        return
    
    preferences = user_preferences[user_id]
    response_type = preferences.get("output", "text")
    voice_model = preferences.get("voice", "Ahmad-PlayAI")

    if message.voice:
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        await bot.download_file(file_path, "message.wav")
        trans = transcribe_audio("message.wav")
        response_text = ask(trans)
    elif message.text:
        response_text = ask(message.text)

    if response_type == "voice":
        audio_file = text_to_speech1(
            response_text, 
            "response.ogg",
            voice_model
        )
        if audio_file:
            voice = FSInputFile(audio_file)
            await message.answer_voice(voice, reply_markup=get_main_keyboard())
            os.remove(audio_file)
        else:
            await message.answer(response_text, reply_markup=get_main_keyboard())
    elif response_type == "text":
        await message.answer(response_text, reply_markup=get_main_keyboard())

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())